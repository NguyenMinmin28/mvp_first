// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/**
 * ===== Enums =====
 */
enum Role {
  ADMIN
  CLIENT
  DEVELOPER
}

enum PriceType {
  FIXED
  HOURLY
}

enum ServiceStatus {
  DRAFT
  PENDING
  PUBLISHED
  REJECTED
  ARCHIVED
}

enum Visibility {
  PUBLIC
  UNLISTED
}

enum MediaKind {
  IMAGE
  VIDEO
  PDF
}

enum LeadStatus {
  NEW
  VIEWED
  CONTACTED
  CLOSED
}

enum ContactVia {
  IN_APP
  EMAIL
  WHATSAPP
}

enum NotifType {
  SERVICE_LEAD_CREATED
  SERVICE_APPROVED
  SERVICE_REJECTED
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum PaymentProvider {
  paypal
  internal
}

enum SubscriptionStatus {
  active
  past_due
  canceled
}

enum PaymentStatus {
  created
  authorized
  captured
  failed
  refunded
}

enum ProjectStatus {
  draft
  submitted
  assigning
  accepted
  in_progress
  completed
  canceled
}

enum ResponseStatus {
  pending
  accepted
  rejected
  expired
  invalidated
}

enum BatchStatus {
  active
  completed
  expired
  replaced
}

enum AuthorRole {
  developer
  admin
}

enum RevealChannel {
  whatsapp
  email
}

enum ReviewType {
  client_for_developer
  developer_for_client
}

enum ModerationStatus {
  published
  hidden
  flagged
}

enum FileType {
  agreement
  verification_document
  other
}

enum DevLevel {
  FRESHER
  MID
  EXPERT
}

enum ContactGrantReason {
  ACCEPTED_PROJECT
  MANUAL_OVERRIDE
  PURCHASED
  ADMIN
}

enum BatchType {
  AUTO_ROTATION
  MANUAL_INVITE
}

enum AdminApprovalStatus {
  draft
  pending
  approved
  rejected
}

enum PresenceStatus {
  available
  checking
  busy
  away
}

/**
 * ===== IdeaSpark Enums =====
 */
enum IdeaStatus {
  DRAFT // bản nháp – chưa gửi duyệt
  PENDING // đã gửi – chờ Admin
  APPROVED // đã duyệt – hiển thị trên Wall
  REJECTED
  ARCHIVED
}

enum IdeaAdminTag {
  INSPIRATION // ý tưởng ngắn, gợi mở
  UNDER_REVIEW // đang thẩm định
  COMING_SOON // đã vào roadmap
}

enum ConnectStatus {
  SENT
  OPENED
  REPLIED
  DECLINED
  CLOSED
}

enum IdeaApprovalAction {
  SUBMITTED
  APPROVED
  REJECTED
  TAG_ADDED
  TAG_REMOVED
  FEATURED
  ARCHIVED
  PINNED
  UNPINNED
  COMMENTS_LOCKED
  COMMENTS_UNLOCKED
  TAKEDOWN
}

enum SparkEventType {
  IDEA_APPROVED
  IDEA_LIKED
  WEEKLY_SPOTLIGHT
  COMMENT_RECEIVED
  CONNECT_RECEIVED
}

enum ReportStatus {
  OPEN
  CLOSED
  RESOLVED
}

/**
 * ===== Core Auth =====
 */
model User {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  role               Role?
  name               String?
  email              String?    @unique
  emailVerified      DateTime?  @map("emailVerifiedAt")
  passwordHash       String?    @db.String
  status             UserStatus @default(ACTIVE)
  phoneE164          String?
  isPhoneVerified    Boolean    @default(false)
  isProfileCompleted Boolean    @default(false)
  image              String?
  lastLoginAt        DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // NextAuth-compatible (nếu dùng)
  accounts Account[]
  sessions Session[]

  // Quan hệ ngược 1–12
  clientProfile    ClientProfile?
  developerProfile DeveloperProfile?
  progressUpdates  ProjectProgressUpdate[] @relation("UserProgressUpdates")
  files            File[]                  @relation("UserFiles")
  reviewsGiven     Review[]                @relation("UserReviewsGiven")
  reviewsReceived  Review[]                @relation("UserReviewsReceived")
  moderatedReviews Review[]                @relation("UserModeratedReviews")

  // IdeaSpark Relations
  ideas              Idea[]              @relation("IdeaAuthor")
  ideaLikes          IdeaLike[]
  ideaBookmarks      IdeaBookmark[]
  ideaComments       IdeaComment[]
  ideaConnects       IdeaConnect[]       @relation("IdeaConnectFrom")
  ideaApprovalEvents IdeaApprovalEvent[] @relation("IdeaApprovalAdmin")
  sparkPointLedger   SparkPointLedger[]
  ideaReports        IdeaReport[]        @relation("IdeaReportReporter")

  // Service Relations
  serviceLeads       ServiceLead[]       @relation("ClientLeads")
  serviceFavorites   ServiceFavorite[]
  serviceLikes       ServiceLike[]
  notifications      NotificationUser[]

  // Follow Relations
  follows            Follow[]            @relation("UserFollows")
  followedBy         Follow[]            @relation("UserFollowedBy")
  followNotifications FollowNotification[] @relation("UserFollowNotifications")
  developerFollowNotifications FollowNotification[] @relation("DeveloperFollowNotifications")

  @@index([lastLoginAt])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * ===== OTP =====
 */
model OtpCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneE164 String?
  email     String?
  hash      String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())

  @@index([phoneE164])
  @@index([email])
}

/**
 * ===== Client Profiles =====
 */
model ClientProfile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  companyName String?
  location    String? // Country/City
  photoUrl    String? // Profile photo URL

  currentSubscriptionId String?              @db.ObjectId
  subscriptions         Subscription[]       @relation("ClientSubscriptions")
  payments              Payment[]            @relation("ClientPayments")
  projects              Project[]            @relation("ClientProjects")
  contactReveals        ContactRevealEvent[] @relation("ClientContactReveals")
  favoriteDevelopers    FavoriteDeveloper[]  @relation("ClientFavorites")
  contactGrants         ContactGrant[]       @relation("ClientContactGrants")
  candidates            AssignmentCandidate[] @relation("ClientCandidates")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([currentSubscriptionId], map: "idx_client_profiles_currentSubscriptionId")
}

/**
 * ===== Subscriptions & Packages =====
 */
model Subscription {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  clientId String        @db.ObjectId
  client   ClientProfile @relation("ClientSubscriptions", fields: [clientId], references: [id])

  packageId String  @db.ObjectId
  package   Package @relation("PackageToSubscriptions", fields: [packageId], references: [id])

  provider               PaymentProvider
  providerSubscriptionId String

  status SubscriptionStatus

  // Enhanced subscription lifecycle
  startAt            DateTime
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean   @default(false)
  canceledAt         DateTime?
  cancelReason       String?

  // Trial support
  trialStart DateTime?
  trialEnd   DateTime?
  isInTrial  Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  payments           Payment[]           @relation("SubscriptionPayments")
  subscriptionUsages SubscriptionUsage[] @relation("SubscriptionToUsage")

  @@unique([provider, providerSubscriptionId], map: "uq_subscriptions_provider_external_id")
  @@index([clientId], map: "idx_subscriptions_clientId")
  @@index([packageId], map: "idx_subscriptions_packageId")
  @@index([status], map: "idx_subscriptions_status")
  @@index([currentPeriodEnd], map: "idx_subscriptions_period_end")
}

/**
 * ===== Payments =====
 */
model Payment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  subscriptionId String       @db.ObjectId
  subscription   Subscription @relation("SubscriptionPayments", fields: [subscriptionId], references: [id])

  clientId String        @db.ObjectId
  client   ClientProfile @relation("ClientPayments", fields: [clientId], references: [id])

  provider          PaymentProvider
  providerPaymentId String

  amount   Float
  currency String @default("USD")

  status PaymentStatus @default(created)

  // Payment lifecycle
  capturedAt DateTime?
  failedAt   DateTime?
  refundedAt DateTime?

  // Metadata
  metadata Json? // Store PayPal payment details

  createdAt DateTime @default(now())

  @@index([subscriptionId], map: "idx_payments_subscriptionId")
  @@index([clientId], map: "idx_payments_clientId")
  @@index([status], map: "idx_payments_status")
  @@index([provider, providerPaymentId], map: "idx_payments_provider_external")
  @@index([capturedAt], map: "idx_payments_captured")
}

/**
 * ===== Webhook Events =====
 */
model WebhookEvent {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  provider        PaymentProvider
  providerEventId String // PayPal event.id
  eventType       String // BILLING.SUBSCRIPTION.ACTIVATED, etc.

  resourceType String? // subscription, payment, etc.
  resourceId   String? // PayPal resource ID

  data        Json // Raw webhook payload
  processed   Boolean   @default(false)
  processedAt DateTime?

  errorMessage String? // If processing failed
  retryCount   Int     @default(0)

  receivedAt DateTime @default(now())

  @@unique([provider, providerEventId], map: "uq_webhook_events_provider_event")
  @@index([provider], map: "idx_webhook_events_provider")
  @@index([eventType], map: "idx_webhook_events_type")
  @@index([processed], map: "idx_webhook_events_processed")
  @@index([receivedAt], map: "idx_webhook_events_received")
}

/**
 * ===== Cron Job Runs =====
 */
model CronRun {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  job        String
  status     String    @default("started") // started | succeeded | failed
  success    Boolean? // convenience flag
  startedAt  DateTime  @default(now())
  finishedAt DateTime?
  details    Json?

  @@index([job], map: "idx_cron_runs_job")
  @@index([startedAt], map: "idx_cron_runs_startedAt")
}

/**
 * ===== Subscription Usage =====
 */
model SubscriptionUsage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  subscriptionId String       @db.ObjectId
  subscription   Subscription @relation("SubscriptionToUsage", fields: [subscriptionId], references: [id])

  periodStart DateTime
  periodEnd   DateTime

  projectsPostedCount    Int  @default(0)
  contactClicksByProject Json // Map<projectId, number>
  // Monthly connects usage (Get in touch messages)
  connectsUsed           Int  @default(0)

  @@index([subscriptionId], map: "idx_subscription_usage_subscriptionId")
  @@index([periodStart], map: "idx_subscription_usage_periodStart")
  @@index([periodEnd], map: "idx_subscription_usage_periodEnd")
}

model Package {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  priceUSD                Float
  projectsPerMonth        Int
  contactClicksPerProject Int
  // Monthly connects quota for contacting developers/services
  connectsPerMonth        Int      @default(0)
  features                String[]
  isPopular               Boolean  @default(false)
  active                  Boolean  @default(true)

  // PayPal specific fields
  provider       PaymentProvider @default(paypal)
  providerPlanId String? // PayPal plan_id
  interval       String          @default("monthly") // "monthly", "yearly"

  // Free trial configuration
  trialPeriodDays    Int? @default(0)
  trialProjectsCount Int? @default(1) // Free trial: 1 project

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[] @relation("PackageToSubscriptions")

  @@unique([name], map: "uq_packages_name")
  @@unique([provider, providerPlanId], map: "uq_packages_provider_plan")
  @@index([active], map: "idx_packages_active")
  @@index([provider], map: "idx_packages_provider")
}

/**
 * ===== Developer Profiles =====
 */
model DeveloperProfile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  photoUrl        String?
  bio             String?
  experienceYears Int      @default(0)
  level           DevLevel
  linkedinUrl     String?
  portfolioLinks  String[] // URLs
  // Additional optional public fields for marketplace cards
  location        String?
  age             Int?
  hourlyRateUsd   Int? // USD per hour

  adminApprovalStatus AdminApprovalStatus @default(draft)
  approvedAt          DateTime?
  rejectedAt          DateTime?
  rejectedReason      String?

  whatsappNumber      String? // E.164
  whatsappVerified    Boolean        @default(false)
  usualResponseTimeMs Int            @default(0)
  currentStatus       PresenceStatus @default(available)

  reviewsSummaryId String?           @unique @db.ObjectId
  reviewsSummary   ReviewsAggregate? @relation("DevProfileToReviews", fields: [reviewsSummaryId], references: [id])

  skills                  DeveloperSkill[]
  contactRevealedProjects Project[]             @relation("ProjectContactReveals")
  assignmentCandidates    AssignmentCandidate[] @relation("DeveloperCandidates")
  contactReveals          ContactRevealEvent[]  @relation("DeveloperContactReveals")
  rotationCursors         RotationCursor[]      @relation("DeveloperToRotationCursors")
  favoritedBy             FavoriteDeveloper[]   @relation("DeveloperFavorites")
  services                Service[]
  contactGrants           ContactGrant[]        @relation("DeveloperContactGrants")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([level])
  @@index([adminApprovalStatus])
  @@index([currentStatus])
  @@index([adminApprovalStatus, currentStatus, level, whatsappVerified], map: "idx_devprofile_eligibility")
}

model DeveloperSkill {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  developerProfileId String           @db.ObjectId
  developerProfile   DeveloperProfile @relation(fields: [developerProfileId], references: [id], onDelete: Cascade)

  skillId String @db.ObjectId
  // ĐẶT TÊN QUAN HỆ để rõ ràng
  skill   Skill  @relation("SkillToDeveloperSkills", fields: [skillId], references: [id])

  years  Int @default(0)
  rating Int @default(0)

  @@unique([developerProfileId, skillId], map: "uq_devskill_profile_skill")
  @@index([skillId], map: "idx_devskill_skill")
}

model ReviewsAggregate {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  averageRating Float    @default(0)
  totalReviews  Int      @default(0)
  updatedAt     DateTime @updatedAt

  developerProfile DeveloperProfile? @relation("DevProfileToReviews")
}

/**
 * ===== Skills =====
 */
model Skill {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  slug      String   @unique
  category  String // e.g., FE/BE/DevOps
  keywords  String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  developerSkills DeveloperSkill[] @relation("SkillToDeveloperSkills")
  rotationCursors RotationCursor[] @relation("SkillToRotationCursors")
  ideaSkills      IdeaSkill[] @relation("IdeaSkillSkills")
  serviceLinks    ServiceSkillOnService[]

  @@index([category], map: "idx_skills_category")
}

/**
 * ===== Projects =====
 */
model Project {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  clientId String        @db.ObjectId
  client   ClientProfile @relation("ClientProjects", fields: [clientId], references: [id])

  title       String // Short project name
  description String // Fast submit ≤ 60s

  skillsRequired String[] @db.ObjectId // Array of skill IDs

  // Budget: prefer single value; min/max kept for backward compatibility
  budget          Float?
  budgetMin       Float? // Legacy
  budgetMax       Float? // Legacy
  currency        String    @default("USD")
  paymentMethod   String?   // "hourly" or "fixed"
  // Timeline (optional)
  expectedStartAt DateTime?
  expectedEndAt   DateTime?

  status   ProjectStatus @default(draft)
  postedAt DateTime?

  disclaimerAccepted Boolean @default(false)
  agreementFileId    String? @db.ObjectId // ref:files
  agreementFile      File?   @relation("ProjectAgreementFiles", fields: [agreementFileId], references: [id])

  contactRevealEnabled       Boolean           @default(false) // Enabled after first accept
  contactRevealedDeveloperId String?           @db.ObjectId
  contactRevealedDeveloper   DeveloperProfile? @relation("ProjectContactReveals", fields: [contactRevealedDeveloperId], references: [id])

  contactRevealsCount Int              @default(0) // For quota
  currentBatchId      String?          @db.ObjectId
  currentBatch        AssignmentBatch? @relation("ProjectCurrentBatch", fields: [currentBatchId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignmentBatches    AssignmentBatch[]       @relation("ProjectBatches")
  progressUpdates      ProjectProgressUpdate[] @relation("ProjectUpdates")
  assignmentCandidates AssignmentCandidate[] @relation("ProjectCandidates")
  contactRevealEvents  ContactRevealEvent[]    @relation("ProjectContactReveals")
  reviews              Review[]                @relation("ProjectReviews")
  contactGrants        ContactGrant[]          @relation("ProjectContactGrants")

  @@index([clientId], map: "idx_projects_clientId")
  @@index([status], map: "idx_projects_status")
  @@index([postedAt], map: "idx_projects_postedAt")
  @@index([currentBatchId], map: "idx_projects_currentBatchId")
}

/**
 * ===== Project Progress Updates =====
 */
model ProjectProgressUpdate {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  projectId String  @db.ObjectId
  project   Project @relation("ProjectUpdates", fields: [projectId], references: [id])

  authorId String @db.ObjectId
  author   User   @relation("UserProgressUpdates", fields: [authorId], references: [id])

  authorRole  AuthorRole // developer or admin
  content     String // Progress text
  attachments String[]   @default([]) @db.ObjectId // Array of file IDs

  createdAt DateTime @default(now())

  @@index([projectId], map: "idx_progress_updates_projectId")
  @@index([authorId], map: "idx_progress_updates_authorId")
  @@index([createdAt], map: "idx_progress_updates_createdAt")
}

/**
 * ===== Assignment Batches =====
 */
model AssignmentBatch {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  projectId String  @db.ObjectId
  project   Project @relation("ProjectBatches", fields: [projectId], references: [id])

  batchNumber Int // Incremental
  selection   Json // {skillIds: array, fresherCount: number, midCount: number, expertCount: number}

  status        BatchStatus @default(active)
  type          BatchType   @default(AUTO_ROTATION)
  isNoExpire    Boolean     @default(false) // true for manual batches
  expiresAt     DateTime? // Optional
  refreshReason String? // When client requests new list

  createdAt DateTime @default(now())

  // Relations
  candidates      AssignmentCandidate[] @relation("BatchCandidates")
  currentProjects Project[]             @relation("ProjectCurrentBatch")
  contactReveals  ContactRevealEvent[]  @relation("BatchContactReveals")

  @@index([projectId], map: "idx_assignment_batches_projectId")
  @@index([status], map: "idx_assignment_batches_status")
  @@index([type], map: "idx_assignment_batches_type")
  @@index([expiresAt], map: "idx_assignment_batches_expiresAt")
}

/**
 * ===== Assignment Candidates =====
 */
model AssignmentCandidate {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  batchId String?         @db.ObjectId // Can be null for direct messages
  batch   AssignmentBatch? @relation("BatchCandidates", fields: [batchId], references: [id])

  projectId String? @db.ObjectId // Can be null for direct messages
  project   Project? @relation("ProjectCandidates", fields: [projectId], references: [id])
  
  notificationLogs NotificationLog[] @relation("CandidateNotifications")

  clientId    String?          @db.ObjectId // Can be null for system-generated candidates
  client      ClientProfile?   @relation("ClientCandidates", fields: [clientId], references: [id])
  
  developerId String           @db.ObjectId
  developer   DeveloperProfile @relation("DeveloperCandidates", fields: [developerId], references: [id])

  level              DevLevel // Snapshot
  assignedAt         DateTime
  acceptanceDeadline DateTime? // nullable for manual invites

  responseStatus ResponseStatus @default(pending)
  respondedAt    DateTime? // Optional

  usualResponseTimeMsSnapshot Int // For UI
  statusTextForClient         String @default("developer is checking")

  isFirstAccepted Boolean   @default(false) // Marks first acceptor
  invalidatedAt   DateTime? // When batch replaced

  // Manual invite fields
  source         BatchType @default(AUTO_ROTATION)
  clientMessage  String?   // Message from client for manual invites
  metadata       Json?     // Additional data like budget, description, etc.

  @@unique([batchId, developerId], map: "uq_assignment_candidates_batch_developer") // 👈 Tránh case race condition lấy lại chính dev đó
  @@index([batchId], map: "idx_assignment_candidates_batchId")
  @@index([projectId], map: "idx_assignment_candidates_projectId")
  @@index([clientId], map: "idx_assignment_candidates_clientId")
  @@index([developerId], map: "idx_assignment_candidates_developerId")
  @@index([responseStatus], map: "idx_assignment_candidates_responseStatus")
  @@index([acceptanceDeadline], map: "idx_assignment_candidates_deadline")
  @@index([responseStatus, developerId], map: "idx_assignment_candidates_pending_counts")
  @@index([source], map: "idx_assignment_candidates_source")
}

/**
 * ===== Contact Grant System =====
 */
model ContactGrant {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId    String?  @db.ObjectId // grant tied to project (preferred), can be null for package/other permissions
  clientId     String   @db.ObjectId
  developerId  String   @db.ObjectId
  allowEmail   Boolean  @default(true)
  allowPhone   Boolean  @default(true)
  allowWhatsApp Boolean @default(true)
  reason       ContactGrantReason
  createdAt    DateTime @default(now())
  expiresAt    DateTime? // null = permanent

  // Relations
  project   Project? @relation("ProjectContactGrants", fields: [projectId], references: [id])
  client    ClientProfile @relation("ClientContactGrants", fields: [clientId], references: [id])
  developer DeveloperProfile @relation("DeveloperContactGrants", fields: [developerId], references: [id])
  viewLogs  ContactViewLog[]

  @@unique([clientId, developerId, projectId], map: "uq_contact_grant_client_dev_project") // 1 client – 1 dev – 1 project only 1 grant
  @@index([clientId], map: "idx_contact_grant_clientId")
  @@index([developerId], map: "idx_contact_grant_developerId")
  @@index([projectId], map: "idx_contact_grant_projectId")
  @@index([expiresAt], map: "idx_contact_grant_expiresAt")
}

model ContactViewLog {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  grantId      String   @db.ObjectId
  viewerId     String   @db.ObjectId // client id
  developerId  String   @db.ObjectId
  projectId    String?  @db.ObjectId
  context      String?  // page/url
  viewedAt     DateTime @default(now())

  // Relations
  grant ContactGrant @relation(fields: [grantId], references: [id])

  @@index([grantId], map: "idx_contact_view_log_grantId")
  @@index([viewerId], map: "idx_contact_view_log_viewerId")
  @@index([developerId], map: "idx_contact_view_log_developerId")
  @@index([viewedAt], map: "idx_contact_view_log_viewedAt")
}

/**
 * ===== Files =====
 */
model File {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  ownerId String @db.ObjectId
  owner   User   @relation("UserFiles", fields: [ownerId], references: [id])

  type       FileType
  storageKey String // S3/GCS path
  checksum   String // Integrity
  uploadedAt DateTime @default(now())

  // Relations
  projectAgreements Project[] @relation("ProjectAgreementFiles")
  ideaCovers        Idea[]    @relation("IdeaCover")

  @@index([ownerId], map: "idx_files_ownerId")
  @@index([type], map: "idx_files_type")
  @@index([uploadedAt], map: "idx_files_uploadedAt")
}

/**
 * ===== Contact Reveal Events =====
 */
model ContactRevealEvent {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  projectId String  @db.ObjectId
  project   Project @relation("ProjectContactReveals", fields: [projectId], references: [id])

  clientId String        @db.ObjectId
  client   ClientProfile @relation("ClientContactReveals", fields: [clientId], references: [id])

  developerId String           @db.ObjectId // Revealed party
  developer   DeveloperProfile @relation("DeveloperContactReveals", fields: [developerId], references: [id])

  batchId String          @db.ObjectId // Related batch
  batch   AssignmentBatch @relation("BatchContactReveals", fields: [batchId], references: [id])

  channel            RevealChannel
  revealedAt         DateTime      @default(now())
  countsAgainstLimit Boolean       @default(true) // Subscription quota
  ip                 String
  userAgent          String

  @@index([projectId], map: "idx_contact_reveals_projectId")
  @@index([clientId], map: "idx_contact_reveals_clientId")
  @@index([developerId], map: "idx_contact_reveals_developerId")
  @@index([batchId], map: "idx_contact_reveals_batchId")
  @@index([revealedAt], map: "idx_contact_reveals_revealedAt")
}

/**
 * ===== Reviews =====
 */
model Review {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  type ReviewType // Direction

  fromUserId String @db.ObjectId // Reviewer
  fromUser   User   @relation("UserReviewsGiven", fields: [fromUserId], references: [id])

  toUserId String @db.ObjectId // Reviewee
  toUser   User   @relation("UserReviewsReceived", fields: [toUserId], references: [id])

  projectId String  @db.ObjectId // Context
  project   Project @relation("ProjectReviews", fields: [projectId], references: [id])

  rating  Int // 1-5
  comment String

  moderationStatus   ModerationStatus @default(published)
  moderatedByAdminId String?          @db.ObjectId // Admin
  moderatedByAdmin   User?            @relation("UserModeratedReviews", fields: [moderatedByAdminId], references: [id])
  moderatedAt        DateTime? // Optional

  createdAt DateTime @default(now())

  @@index([projectId], map: "idx_reviews_projectId")
  @@index([fromUserId], map: "idx_reviews_fromUserId")
  @@index([toUserId], map: "idx_reviews_toUserId")
  @@index([type], map: "idx_reviews_type")
  @@index([moderationStatus], map: "idx_reviews_moderationStatus")
  @@index([rating], map: "idx_reviews_rating")
  @@index([createdAt], map: "idx_reviews_createdAt")
}

/**
 * ===== Rotation Cursors =====
 */
model RotationCursor {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  skillId String @db.ObjectId
  skill   Skill  @relation("SkillToRotationCursors", fields: [skillId], references: [id])

  level DevLevel

  lastDeveloperId String?           @db.ObjectId // Legacy field for backward compatibility
  lastDeveloper   DeveloperProfile? @relation("DeveloperToRotationCursors", fields: [lastDeveloperId], references: [id])
  
  lastDeveloperIds String[] @default([]) // New field for multiple developers

  updatedAt DateTime @updatedAt

  @@unique([skillId, level], map: "uq_rotation_cursors_skill_level")
  @@index([skillId], map: "idx_rotation_cursors_skillId")
  @@index([level], map: "idx_rotation_cursors_level")
  @@index([lastDeveloperId], map: "idx_rotation_cursors_lastDeveloperId")
}

/**
 * ===== Notification Models =====
 */
model NotificationLog {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  candidateId String @db.ObjectId
  candidate   AssignmentCandidate @relation("CandidateNotifications", fields: [candidateId], references: [id])

  type String // "project_assignment", "reminder", "deadline_warning"
  status String // "sent", "delivered", "failed"
  sentAt DateTime
  deliveredAt DateTime?
  errorMessage String?

  createdAt DateTime @default(now())

  @@index([candidateId], map: "idx_notification_log_candidateId")
  @@index([type], map: "idx_notification_log_type")
  @@index([status], map: "idx_notification_log_status")
}

// Notifications (generic, fan-out to users)
model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  actorUserId String?  @db.ObjectId
  projectId   String?  @db.ObjectId
  payload     Json
  createdAt   DateTime @default(now())

  users NotificationUser[]

  @@index([type], map: "idx_notification_type")
  @@index([projectId], map: "idx_notification_project")
  @@index([createdAt], map: "idx_notification_createdAt")
}

model NotificationUser {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  notificationId String   @db.ObjectId
  userId         String   @db.ObjectId
  readAt         DateTime?
  archivedAt     DateTime?

  notification Notification @relation(fields: [notificationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@index([userId, readAt], map: "idx_notifuser_user_read")
  @@index([userId, archivedAt], map: "idx_notifuser_user_archived")
  @@unique([notificationId, userId], map: "uq_notifuser_notification_user")
}

/**
 * ===== IdeaSpark Models =====
 */
model Idea {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  authorId String @db.ObjectId
  author   User?  @relation("IdeaAuthor", fields: [authorId], references: [id])

  title       String
  summary     String // text ngắn cho "inspiration card"
  body        String? // nội dung dài (tuỳ chọn)
  coverFileId String? @db.ObjectId
  cover       File?   @relation("IdeaCover", fields: [coverFileId], references: [id])
  coverUrl    String? // direct image URL (like blog)

  status    IdeaStatus     @default(PENDING)
  adminTags IdeaAdminTag[]
  
  // Thêm fields mới
  rejectedReason String? // lý do từ chối
  isSpotlight    Boolean @default(false) // có phải spotlight tuần này không
  isPinned       Boolean @default(false) // admin có pin không
  isLocked       Boolean @default(false) // admin có khóa comment không

  likeCount     Int @default(0)
  commentCount  Int @default(0)
  bookmarkCount Int @default(0)
  connectCount  Int @default(0)

  approvedAt DateTime?
  rejectedAt DateTime?
  featuredAt DateTime? // spotlight tuần hiện hành (nếu có)
  deletedAt  DateTime? // soft delete

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 1-n quan hệ "ảo" qua khoá ngoại
  likes     IdeaLike[]
  comments  IdeaComment[]
  bookmarks IdeaBookmark[]
  connects  IdeaConnect[]
  reports   IdeaReport[]
  skills    IdeaSkill[] @relation("IdeaSkills")
  spotlights IdeaSpotlight[] @relation("IdeaSpotlights")

  @@index([status, createdAt(sort: Desc)])
  @@index([authorId, createdAt(sort: Desc)])
  @@index([isSpotlight, createdAt(sort: Desc)])
  @@index([title, summary]) // full-text search
}

model IdeaLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  ideaId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  Idea      Idea     @relation(fields: [ideaId], references: [id])

  @@unique([ideaId, userId]) // 1 user chỉ like 1 lần
  @@index([userId])
  @@index([ideaId, createdAt(sort: Desc)])
}

model IdeaBookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  ideaId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  Idea      Idea     @relation(fields: [ideaId], references: [id])

  @@unique([ideaId, userId])
  @@index([userId, createdAt(sort: Desc)])
  @@index([ideaId, createdAt(sort: Desc)])
}

model IdeaComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  ideaId    String   @db.ObjectId
  userId    String   @db.ObjectId
  content   String
  parentId  String?  @db.ObjectId // hỗ trợ reply theo luồng
  isHelpful Boolean  @default(false) // admin mark helpful
  deletedAt DateTime? // soft delete
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Idea      Idea     @relation(fields: [ideaId], references: [id])

  @@index([ideaId, createdAt(sort: Desc)])
  @@index([parentId])
  @@index([userId, createdAt(sort: Desc)])
}

model IdeaConnect {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  ideaId      String        @db.ObjectId
  fromUserId  String        @db.ObjectId // người bấm "Connect"
  fromUser    User          @relation("IdeaConnectFrom", fields: [fromUserId], references: [id])
  toUserId    String        @db.ObjectId // tác giả Idea (thường = authorId)
  message     String?
  status      ConnectStatus @default(SENT)
  emailSentAt DateTime?
  createdAt   DateTime      @default(now())
  Idea        Idea          @relation(fields: [ideaId], references: [id])

  @@unique([ideaId, fromUserId]) // chặn spam: 1 người connect 1 idea 1 lần
  @@index([toUserId, status, createdAt])
  @@index([ideaId, createdAt(sort: Desc)])
}

model IdeaReport {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  ideaId     String        @db.ObjectId
  reporterId String        @db.ObjectId
  reason     String        // lý do report
  status     ReportStatus  @default(OPEN)
  adminNote  String?       // ghi chú admin
  resolvedAt DateTime?
  createdAt  DateTime      @default(now())
  User       User          @relation("IdeaReportReporter", fields: [reporterId], references: [id])
  Idea       Idea          @relation(fields: [ideaId], references: [id])

  @@index([ideaId, createdAt(sort: Desc)])
  @@index([reporterId, createdAt(sort: Desc)])
  @@index([status, createdAt(sort: Desc)])
}

model IdeaSkill {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  ideaId   String @db.ObjectId
  skillId  String @db.ObjectId
  createdAt DateTime @default(now())
  Idea     Idea   @relation("IdeaSkills", fields: [ideaId], references: [id])
  Skill    Skill  @relation("IdeaSkillSkills", fields: [skillId], references: [id])

  @@unique([ideaId, skillId])
  @@index([skillId])
  @@index([ideaId])
}

model IdeaApprovalEvent {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  ideaId    String             @db.ObjectId
  adminId   String             @db.ObjectId
  action    IdeaApprovalAction
  note      String?
  createdAt DateTime           @default(now())
  User      User?              @relation("IdeaApprovalAdmin", fields: [adminId], references: [id])

  @@index([ideaId, createdAt(sort: Desc)])
  @@index([adminId, createdAt(sort: Desc)])
}

model SparkPointLedger {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  userId    String         @db.ObjectId
  ideaId    String?        @db.ObjectId
  type      SparkEventType
  points    Int            @default(0)
  meta      Json?          // thông tin bổ sung (rank, reason, etc.)
  createdAt DateTime       @default(now())
  User      User           @relation(fields: [userId], references: [id])

  @@index([userId, createdAt(sort: Desc)])
  @@index([type, createdAt(sort: Desc)])
}

// (tuỳ chọn) Spotlight tách bảng nếu muốn xếp hạng top trong tuần
model IdeaSpotlight {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  weekStart DateTime // ISO week start (UTC 00:00 Monday chẳng hạn)
  ideaId    String   @db.ObjectId
  rank      Int      @default(0)
  createdAt DateTime @default(now())
  
  // Relations
  Idea      Idea     @relation("IdeaSpotlights", fields: [ideaId], references: [id])

  @@unique([weekStart, ideaId])
  @@index([weekStart, rank])
  @@index([ideaId, weekStart(sort: Desc)])
}

// Blog Models
enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
}

enum PostType {
  ARTICLE
  NEWS
  TUTORIAL
  CASE_STUDY
}

model Post {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  slug        String     @unique
  title       String
  excerpt     String?
  content     String
  coverUrl    String?
  status      PostStatus @default(DRAFT)
  type        PostType   @default(ARTICLE)
  categoryId  String?    @db.ObjectId
  tags        String[]   // Array of tag IDs
  authorId    String     @db.ObjectId
  views       Int        @default(0)
  clicks      Int        @default(0)
  isFeatured  Boolean    @default(false)
  publishedAt DateTime?
  region      String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  category   Category? @relation(fields: [categoryId], references: [id])
  author     Author   @relation(fields: [authorId], references: [id])
  comments   Comment[]

  @@index([status, publishedAt])
  @@index([categoryId])
  @@index([authorId])
  @@index([isFeatured])
  @@index([views, clicks])
}

model Category {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts Post[]
  serviceLinks ServiceCategoryOnService[]
}

model Tag {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  serviceLinks ServiceTagOnService[]
}

model Author {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  avatar    String?
  bio       String?
  userId    String? @db.ObjectId // Link to existing user if applicable
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts    Post[]
  comments Comment[]

  @@index([userId])
}

model Comment {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  authorId  String @db.ObjectId
  postId    String @db.ObjectId
  parentId  String? @db.ObjectId // For nested comments
  status    ModerationStatus @default(published)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post    Post   @relation(fields: [postId], references: [id])
  author  Author @relation(fields: [authorId], references: [id])
  parent  Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([parentId])
  @@index([status])
  @@index([authorId])
}

/**
 * ===== Favorite Developers =====
 */
model FavoriteDeveloper {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  clientId       String @db.ObjectId
  developerId    String @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  client    ClientProfile    @relation("ClientFavorites", fields: [clientId], references: [id], onDelete: Cascade)
  developer DeveloperProfile @relation("DeveloperFavorites", fields: [developerId], references: [id], onDelete: Cascade)

  @@unique([clientId, developerId], map: "idx_favorite_developers_unique")
  @@index([clientId])
  @@index([developerId])
}

/**
 * ===== Follow System =====
 */
model Follow {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  followerId     String @db.ObjectId // Client who follows
  followingId    String @db.ObjectId // Developer being followed
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  follower  User @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId], map: "idx_follows_unique")
  @@index([followerId])
  @@index([followingId])
  @@index([createdAt])
}

/**
 * ===== Follow Notifications =====
 */
model FollowNotification {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  followerId     String @db.ObjectId // Client who follows
  developerId    String @db.ObjectId // Developer being followed
  type           String // "portfolio_update", "review_received", "availability_change", "idea_posted"
  title          String
  message        String
  metadata       Json? // Additional data like ideaId, reviewId, etc.
  isRead         Boolean @default(false)
  createdAt      DateTime @default(now())

  // Relations
  follower  User @relation("UserFollowNotifications", fields: [followerId], references: [id], onDelete: Cascade)
  developer User @relation("DeveloperFollowNotifications", fields: [developerId], references: [id], onDelete: Cascade)

  @@index([followerId, isRead])
  @@index([developerId])
  @@index([type])
  @@index([createdAt])
}

/**
 * ===== Service Models =====
 */
model Service {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  slug         String   @unique
  title        String
  shortDesc    String
  description  String
  coverUrl     String?
  priceType    PriceType
  priceMin     Int?
  priceMax     Int?
  deliveryDays Int?
  revisions    Int?
  status       ServiceStatus @default(DRAFT)
  visibility   Visibility    @default(PUBLIC)
  ratingAvg    Float         @default(0)
  ratingCount  Int           @default(0)
  views        Int           @default(0)
  likesCount   Int           @default(0)
  favoritesCount Int         @default(0)

  developerId  String           @db.ObjectId
  developer    DeveloperProfile @relation(fields: [developerId], references: [id])

  media        ServiceMedia[]
  categories   ServiceCategoryOnService[]
  skills       ServiceSkillOnService[]
  tags         ServiceTagOnService[]
  leads        ServiceLead[]       @relation("ServiceLeads")
  favorites    ServiceFavorite[]
  likes        ServiceLike[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([developerId])
  @@index([status])
  @@index([visibility])
  @@index([ratingAvg])
  @@index([views])
  @@index([createdAt])
}

model ServiceMedia {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  serviceId  String     @db.ObjectId
  service    Service    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  url        String
  kind       MediaKind
  sortOrder  Int        @default(0)

  @@index([serviceId])
  @@index([sortOrder])
}

model ServiceCategoryOnService {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceId  String   @db.ObjectId
  categoryId String   @db.ObjectId
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([serviceId, categoryId])
}

model ServiceSkillOnService {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  serviceId String @db.ObjectId
  skillId   String @db.ObjectId
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  skill     Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([serviceId, skillId])
}

model ServiceTagOnService {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  serviceId String @db.ObjectId
  tagId     String @db.ObjectId
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([serviceId, tagId])
}

model ServiceLead {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  serviceId   String     @db.ObjectId
  service     Service    @relation("ServiceLeads", fields: [serviceId], references: [id])
  clientId    String     @db.ObjectId
  client      User       @relation("ClientLeads", fields: [clientId], references: [id])
  message     String?
  status      LeadStatus @default(NEW)
  contactVia  ContactVia @default(IN_APP)
  createdAt   DateTime   @default(now())

  @@index([serviceId])
  @@index([clientId])
  @@index([status])
  @@index([createdAt])
}

model ServiceFavorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  serviceId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, serviceId])
  @@index([userId])
  @@index([serviceId])
}

model ServiceLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  serviceId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, serviceId])
  @@index([userId])
  @@index([serviceId])
}

